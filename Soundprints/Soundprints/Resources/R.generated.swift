//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `annotation-in-range-icon`.
    static let annotationInRangeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "annotation-in-range-icon")
    /// Image `annotation-not-in-range-icon`.
    static let annotationNotInRangeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "annotation-not-in-range-icon")
    /// Image `filter-button-icon`.
    static let filterButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter-button-icon")
    /// Image `listen-close-button-icon`.
    static let listenCloseButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "listen-close-button-icon")
    /// Image `play-icon-blue`.
    static let playIconBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "play-icon-blue")
    /// Image `play-icon`.
    static let playIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "play-icon")
    /// Image `record-button-icon`.
    static let recordButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "record-button-icon")
    /// Image `records-button-recording-icon`.
    static let recordsButtonRecordingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "records-button-recording-icon")
    /// Image `sounds-list-button-icon`.
    static let soundsListButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sounds-list-button-icon")
    /// Image `sounds-list-close-button-icon`.
    static let soundsListCloseButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sounds-list-close-button-icon")
    /// Image `user-location-icon`.
    static let userLocationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-location-icon")
    /// Image `white-gradient`.
    static let whiteGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "white-gradient")
    
    /// `UIImage(named: "annotation-in-range-icon", bundle: ..., traitCollection: ...)`
    static func annotationInRangeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.annotationInRangeIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "annotation-not-in-range-icon", bundle: ..., traitCollection: ...)`
    static func annotationNotInRangeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.annotationNotInRangeIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter-button-icon", bundle: ..., traitCollection: ...)`
    static func filterButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filterButtonIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "listen-close-button-icon", bundle: ..., traitCollection: ...)`
    static func listenCloseButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listenCloseButtonIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "play-icon", bundle: ..., traitCollection: ...)`
    static func playIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "play-icon-blue", bundle: ..., traitCollection: ...)`
    static func playIconBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playIconBlue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "record-button-icon", bundle: ..., traitCollection: ...)`
    static func recordButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recordButtonIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "records-button-recording-icon", bundle: ..., traitCollection: ...)`
    static func recordsButtonRecordingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recordsButtonRecordingIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sounds-list-button-icon", bundle: ..., traitCollection: ...)`
    static func soundsListButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soundsListButtonIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sounds-list-close-button-icon", bundle: ..., traitCollection: ...)`
    static func soundsListCloseButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soundsListCloseButtonIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user-location-icon", bundle: ..., traitCollection: ...)`
    static func userLocationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userLocationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "white-gradient", bundle: ..., traitCollection: ...)`
    static func whiteGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteGradient, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ProgressBarView`.
    static let progressBarView = _R.nib._ProgressBarView()
    
    /// `UINib(name: "ProgressBarView", in: bundle)`
    static func progressBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.progressBarView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SoundsListCell`.
    static let soundsListCell: Rswift.ReuseIdentifier<SoundsListCell> = Rswift.ReuseIdentifier(identifier: "SoundsListCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Filter`.
    static let filter = _R.storyboard.filter()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `MainMap`.
    static let mainMap = _R.storyboard.mainMap()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `SoundsList`.
    static let soundsList = _R.storyboard.soundsList()
    
    /// `UIStoryboard(name: "Filter", bundle: ...)`
    static func filter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.filter)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MainMap", bundle: ...)`
    static func mainMap(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainMap)
    }
    
    /// `UIStoryboard(name: "SoundsList", bundle: ...)`
    static func soundsList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.soundsList)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ProgressBarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProgressBarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try login.validate()
      try filter.validate()
      try mainMap.validate()
      try soundsList.validate()
    }
    
    struct filter: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let filterViewController = StoryboardViewControllerResource<FilterViewController>(identifier: "FilterViewController")
      let name = "Filter"
      
      func filterViewController(_: Void = ()) -> FilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sounds-list-close-button-icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sounds-list-close-button-icon' is used in storyboard 'Filter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "white-gradient") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'white-gradient' is used in storyboard 'Filter', but couldn't be loaded.") }
        if _R.storyboard.filter().filterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterViewController' could not be loaded from storyboard 'Filter' as 'FilterViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let facebookLoginViewController = StoryboardViewControllerResource<FacebookLoginViewController>(identifier: "FacebookLoginViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      
      func facebookLoginViewController(_: Void = ()) -> FacebookLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: facebookLoginViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.login().facebookLoginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'facebookLoginViewController' could not be loaded from storyboard 'Login' as 'FacebookLoginViewController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = InitialViewController
      
      let bundle = R.hostingBundle
      let initialViewController = StoryboardViewControllerResource<InitialViewController>(identifier: "InitialViewController")
      let name = "Main"
      
      func initialViewController(_: Void = ()) -> InitialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initialViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().initialViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initialViewController' could not be loaded from storyboard 'Main' as 'InitialViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mainMap: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainMapViewController = StoryboardViewControllerResource<MainMapViewController>(identifier: "MainMapViewController")
      let name = "MainMap"
      
      func mainMapViewController(_: Void = ()) -> MainMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainMapViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "white-gradient") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'white-gradient' is used in storyboard 'MainMap', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter-button-icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter-button-icon' is used in storyboard 'MainMap', but couldn't be loaded.") }
        if UIKit.UIImage(named: "record-button-icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'record-button-icon' is used in storyboard 'MainMap', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sounds-list-button-icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sounds-list-button-icon' is used in storyboard 'MainMap', but couldn't be loaded.") }
        if _R.storyboard.mainMap().mainMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainMapViewController' could not be loaded from storyboard 'MainMap' as 'MainMapViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct soundsList: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SoundsList"
      let soundsListViewController = StoryboardViewControllerResource<SoundsListViewController>(identifier: "SoundsListViewController")
      
      func soundsListViewController(_: Void = ()) -> SoundsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: soundsListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sounds-list-close-button-icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sounds-list-close-button-icon' is used in storyboard 'SoundsList', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play-icon-blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play-icon-blue' is used in storyboard 'SoundsList', but couldn't be loaded.") }
        if _R.storyboard.soundsList().soundsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'soundsListViewController' could not be loaded from storyboard 'SoundsList' as 'SoundsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
